// Note that the white code is autogenerated by VSCode to help with types / variables
// This Roguelike in Rust is ECS based (Entity Component System) - Different from OOP approach
// Attach Components to Entities rather than inheritence
// Different files are automatically considered different modules

// Having 3/ makes the comopiler use the comment as a function description usable to IDEs

use rltk::{GameState, Rltk, RGB};
use specs::prelude::*; // ECS (Entity componenet system - assoc components with entities)

// USE MODULES /////////////////////////////////////////////////////////
// Must be careful to set structs, functions, and variables to public when accessible to outside modules
mod components;
pub use components::*;
mod map;
pub use map::*;
mod player;
use player::*;
mod rect;
pub use rect::Rect; // Makes it accessible as super::Rect rather than super::rect::Rect

// GAME STATE /////////////////////////////////////////////////////////
pub struct State {
    pub ecs: World, // Registers all components at startup
}

// Adds a function that will be called by tick to run systems
impl State {
    fn run_systems(&mut self) {
        // let mut lw = LeftWalker {};
        // lw.run_now(&self.ecs);
        self.ecs.maintain();
    }
}

impl GameState for State {
    // Required trait for RLTK
    fn tick(&mut self, ctx: &mut Rltk) {
        // mutable reference to RLTK context (the screen), received from the main
        ctx.cls(); // Clear screen

        player_input(self, ctx); // Get player input
        self.run_systems(); // Run any systems

        let map = self.ecs.fetch::<Vec<TileType>>(); // Fetch will crash if resource not there (Doesn't wrap in Option)
        draw_map(&map, ctx);

        let positions = self.ecs.read_storage::<Position>();
        let renderables = self.ecs.read_storage::<Renderable>();

        // Loops through positions and renderables and joins them, guarantees that returned tuples are from entities with both
        for (pos, render) in (&positions, &renderables).join() {
            ctx.set(pos.x, pos.y, render.fg, render.bg, render.glyph);
        }
        // ctx.print(1, 1, "Hello Rust World");
    }
}

// SYSTEMS ////////////////////////////////////////////////////////////////////////////////////////

///// EXAMPLE SYSTEM FROM CHAPTER 1 ///////////
// struct LeftWalker {}

// impl<'a> System<'a> for LeftWalker {
//     // 'a refers to the lifetime of the System
//     type SystemData = (ReadStorage<'a, LeftMover>, WriteStorage<'a, Position>);

//     fn run(&mut self, (lefty, mut pos): Self::SystemData) {
//         for (_lefty, pos) in (&lefty, &mut pos).join() {
//             pos.x -= 1;
//             if pos.x < 0 {
//                 pos.x = 79;
//             }
//         }
//     }
// }

// MAIN FUNCITON ///////////////////////////////////////////////////////////////////////
fn main() -> rltk::BError {
    use rltk::RltkBuilder;
    let context = RltkBuilder::simple80x50() // Returns a context (screen)
        .with_title("Roguelike Tutorial")
        .build()?; // The ? unwraps a Result or Option type (in this case a Result)
    let mut gs = State { ecs: World::new() }; // gs is a State struct defined above

    // REGISTER COMPONENTS WITH THE WORLD
    // Must register all of them
    gs.ecs.register::<Position>();
    gs.ecs.register::<Renderable>();
    //gs.ecs.register::<LeftMover>();
    gs.ecs.register::<Player>();

    // INSERT THE MAP AND GET PLAYER STARTING POSITION
    let (rooms, map) = new_map_rooms_and_corridors();
    gs.ecs.insert(map);
    let (player_x, player_y) = rooms[0].center();

    // CREATE SOME ENTITIES /////////////////////
    // Player's character
    gs.ecs
        .create_entity()
        .with(Position {
            x: player_x,
            y: player_y,
        })
        .with(Renderable {
            glyph: rltk::to_cp437('@'), // See http://dwarffortresswiki.org/index.php/Character_table
            fg: RGB::named(rltk::YELLOW),
            bg: RGB::named(rltk::BLACK),
        })
        .with(Player {})
        .build();

    //// FROM CHAPTER ONE EXAMPLE ///////
    // for i in 0..10 {
    //     gs.ecs
    //         .create_entity()
    //         .with(Position { x: i * 7, y: 20 })
    //         .with(Renderable {
    //             glyph: rltk::to_cp437('â˜º'),
    //             fg: RGB::named(rltk::RED),
    //             bg: RGB::named(rltk::BLACK),
    //         })
    //         .with(LeftMover {})
    //         .build();
    // }

    rltk::main_loop(context, gs) // Calls the main_loop in rltk, this will call tick in the State
}
